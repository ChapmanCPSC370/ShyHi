package dev.rug.shyhi;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import android.os.AsyncTask;
import android.util.Log;
import android.widget.TextView;


//helper utility class for calling rest and getting json objects
public class RestUtils {

	public RestUtils(){};
	
	//It works! When passed a convo id it will return the JSON of the convo. It still needs to 
	//Though right now it does not use GSON to convert them to Java Objects..working on that
	public Convo getConvoById(String convoID){
		//String convoStr = 
    	String convoStr = "";
		try {
			convoStr = new fetchJSON().execute("http://104.236.22.60:5984/shyhi/_design/conversation/_view/get_convo?key=%22"+convoID+"%22").get();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Gson gson = new Gson();
		Convo convo = null;
		Log.i("getConvoById",convoStr);
    	return convo;
	}
	
	//It works! When passed a user ID, it returns all convos that user is involved in
	//Though right now it does not use GSON to convert them to Java Objects
	public ArrayList<Convo> getAllConvos(String key){
    	String allConvosStr = "";
		try {
			allConvosStr = new fetchJSON().execute("http://104.236.22.60:5984/shyhi/_design/conversation/_view/get_all_convo?key=%22"+key+"%22").get();
			JsonParser jp = new JsonParser();
			JsonElement convos = jp.parse(allConvosStr);
			JsonArray convosArr = (JsonArray) convos.getAsJsonObject().get("rows");
			
			
		    //JsonElement je = jp.parse(allConvosStr);
		    //JsonElement je2 = je.getAsJsonObject().get("rows");
		    //JsonElement je3 = je2.getAsJsonObject().get("PrincipalTranslations");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	ArrayList<Convo> convoArr = null;
    	Log.i("getAllConvos",allConvosStr);
    	//turn the allConvosStr into a java object
    	return convoArr;
    }
	
	public void updateConvo(Convo convo){
		//send convo to couchdb and update
	}
	
	
	//helper method to get the JSON object
    public String getJSON(String address){
    	
    	StringBuilder builder = new StringBuilder();
    	HttpClient client = new DefaultHttpClient();
    	HttpGet httpGet = new HttpGet(address);
    	try{
    		HttpResponse response = client.execute(httpGet);
    		StatusLine statusLine = response.getStatusLine();
    		int statusCode = statusLine.getStatusCode();
    		if(statusCode == 200){
    			HttpEntity entity = response.getEntity();
    			InputStream content = entity.getContent();
    			BufferedReader reader = new BufferedReader(new InputStreamReader(content));
    			String line;
    			while((line = reader.readLine()) != null){
    				builder.append(line);
    			}
    		} else {
    			Log.e("ShyHi","Failed to get JSON object");
    		}
    	}catch(ClientProtocolException e){
    		e.printStackTrace();
    	} catch (IOException e){
    		e.printStackTrace();
    	}
    	return builder.toString();
    }
    
	//helper AsyncTask class
	private class fetchJSON extends AsyncTask<String, Integer, String> {
        @Override
		protected String doInBackground(String... id) {
        	String convoJSON = getJSON(id[0]);
            return convoJSON;
        } 
        @Override
        protected void onPostExecute(String result) {
        	
        }
    }
}
